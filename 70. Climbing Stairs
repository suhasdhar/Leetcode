--------------------------------*/
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
----------------------------------------------------*/


class Solution {
    
    
    
    public static int fun(int n, int []t){
      
         
        
       if(n<0){return 0;}
        if(n==0){return 1;}
       
        if(t[n]!=-1){return t[n];}
        
       
       t[n]=  fun(n-1,t)+fun(n-2,t);
          return t[n];
    } 
    
    
    
    
    public int climbStairs(int n) {
    
        
        int t[]=new int[n+1]; 
        for(int i=0;i<t.length;i++){
            
            t[i]=-1;
            
        }
       return fun(n,t);
        
       
          }
        
        
    }
